# GLOBAL METADATA
## Reference: https://snapcraft.io/docs/snapcraft-yaml-reference
## The name must be unique in the Snap Store.
## Valid snap names consist of lower-case alphanumeric characters and hyphens.
## They cannot be all numbers and they also cannot start or end with a hyphen.
name: cloudflare # you probably want to 'snapcraft register <name>'
## The <base> keyword defines a special kind of snap that provides a run-time environment
## with a minimal set of libraries that are common to most applications.
## They’re transparent to users, but they need to be considered, and specified, when building a snap.
base: core22 # the base snap is the execution environment for this snap
version: "2024.6.0+git" # just for humans, typically '1.2+git' or '1.3.2'
summary: cloudflared + warp # 79 char long summary
description: |
  To create a truly federated storage architecture oCIS breaks down the old ownCloud 10 user specific namespace, 
  which is assembled on the server side, and makes the individual parts accessible to clients as storage spaces 
  and storage space registries.
website: https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/install-and-setup/tunnel-guide
# icon: <icon path?>
license: MIT

# ARCHITECTURES
## builds a snap to run on the same architecture as the build environment.
## ref: https://snapcraft.io/docs/architectures
# architectures:
#- build-on: arm64
#    build-for:
# - build-on: arm64
# build-for: arm64
# - build-on: amd64

lint:
  ignore:
    - library
# SECURITY MODEL
## Because devmode is only intended for development,
## snaps must be set to strict confinement before they can be published as “stable” in the Snap Store.
## Once an app is working well in devmode, you can review confinement violations,
## add appropriate interfaces, and switch to strict confinement.
confinement: devmode # use 'strict' once you have the right plugs and slots
## Defines the quality grade of the snap.
## Can be either devel (i.e. a development version of the snap,
## so not to be published to the stable or candidate channels) or
## stable (i.e. a stable release or release candidate, which can be released to all channels).
## A snap of type app (default) cannot be set to stable if the base is not on a stable channel.
grade: devel # must be 'stable' to release into candidate/stable channels

#* PARTS
#? Reference: https://snapcraft.io/docs/snapcraft-parts-metadata
##* are the raw building blocks of a snap, used to collect and build binaries and their dependencies.
##* Parts define what sources are needed to assemble your app.
##* Parts can be anything: programs, libraries, or other needed assets.
parts:
  hooks:
    plugin: dump
    source: src/hooks/
    organize:
      bin/: snap/hooks/

  cloudflare:
    plugin: dump
    source: https://github.com/cloudflare/cloudflared/releases/download/2024.6.0/cloudflared-linux-arm64.deb
    source-type: deb

    override-build: |
      craftctl default
      ls -al $CRAFT_PART_INSTALL

  cloudflare-init:
    plugin: dump
    after:
      - cloudflare
    # https://download.owncloud.com/ocis/ocis/stable/5.0.5/ocis-5.0.5-linux-arm64
    source: src/cloudflare
    #? In the key/value pair, the key represents the path of a file inside the part and
    #? the value represents how the file is going to be staged.
    #> renames built files in CRAFT_PART_INSTALL
    organize:
      # bin/: bin/
      config/: etc/cloudflared/

    stage:
      # - bin/*
      - etc/cloudflared/
      # - -usr/bin/.gitkeep

    override-prime: |
      echo "PRIME Override ($CRAFT_PRIME):"
      craftctl default
      # mkdir -p $CRAFT_PRIME/bin
      ln $CRAFT_PRIME/usr/bin $CRAFT_PRIME/bin
      ls -al $CRAFT_PRIME
      ls -al $CRAFT_PRIME/bin
      ls -al $CRAFT_PRIME/usr/bin
    #   # cp --archive --link --no-dereference -v $CRAFT_PRIME/usr/ $CRAFT_PRIME

# System user for filters and backends to drop privileges, "lp" is not
# available in a Snap
#? See: https://forum.snapcraft.io/t/system-usernames/
# system-usernames:
#   #? From version 2.41 onwards, snapd supports the creation of a snap_daemon user and group within a snap, exposed as user ID (UID) and group ID (GID) 584788 on the host system.
#   snap_daemon: ocis
#   #? From snapd 2.61 onwards, snap_daemon is being deprecated and replaced with _daemon_ (with underscores), which now possesses a UID of 584792.
#   # _daemon_: ocis

#? Layouts are transparently supported by Snapcraft when using a base snap (e.g. base: core22).
#? Reference: https://snapcraft.io/docs/snap-layouts
#? Example: https://github.com/OpenPrinting/cups-snap/blob/master/snapcraft.yaml
# As a simple example, consider an application you want to snap that:
#   - stores all data in /var/lib/foo
#   - has a configuration file in /etc/foo.conf
#   - uses read-only data in /usr/share/foo
# A layout that allows such software to be used without snap-specific modifications can be defined as follows:
#! None of the above filesystem modifications are visible to any other snaps, or from the wider user session.
#! They’re only visible within the per-snap mount namespace.
#? Layouts are defined as a key-value map, mapping from a <target-path> to a layout declaration.
#? Each declaration may be one of the following:
#* symlink: <source-path>: create a symbolic link.
#*    This method is preferred because it is the cheapest;
#*    the other methods significantly increase the startup time of your application.
#* bind: <source-path>: bind-mount a directory.
#* bind-file: <source-path>: bind-mount a file
#* type: tmpfs: mount a private temporary in-memory filesystem
layout:
  /bin:
    symlink: $SNAP/bin
  /usr/bin:
    symlink: $SNAP/usr/bin
    # bind: $SNAP/usr/bin/ocis

  #* Path to system relevant data.
  #* Because Infinite Scale does not use a database for storing information like users, groups, spaces, internal data, etc.,
  #* it saves all this data to a permanent file location. Depending on the system setup, the base directory contains not
  #* only the metadata but also blobs. See Filesystems and Shared Storage for more details.
  #* The base path has a default location for metadata and service dependent data (see above) which must be on a POSIX storage.
  #* If not otherwise defined when using S3, it is also used to store blobs using that path:
  #*   - For container images (inside the container) => `/var/lib/ocis`
  #*   - For binary releases => `$HOME/.ocis/`
  /var/log:
    # bind: $SNAP_DATA/var/lib/ocis
    bind: $SNAP_COMMON/var/log
  # /usr/share/foo:
  #   bind: $SNAP/usr/share/foo
  #* Path to config files.
  #* The configuration directory has a default location for config files, which must be on a POSIX storage:
  #*  - For container images (inside the container) => `/etc/ocis/`
  #*  - For binary releases => `$HOME/.ocis/config/`
  #?    OCIS_CONFIG_DIR: $SNAP_USER_DATA/etc/ocis
  /etc/cloudflared:
    bind: $SNAP_DATA/etc/cloudflared

#? Global environment variables
environment:
  CONFIG_FILE: $SNAP_DATA/etc/cloudflared/config.yml

# #? HOOKS
# hooks:
#   configure:

#? APPS
## ref: https://snapcraft.io/docs/snapcraft-app-and-service-metadata
apps:
  ocis:
    command: bin/cloudflared
    daemon: simple
    install-mode: disable
    restart-condition: always
    plugs:
      - network
      - network-bind
      - network-control
      - firewall-control
      - firewall
      - firewall-observe
      - system-observe
      - system-observe-control
      - system-files
